import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.*;

public class RecipeRecommender {

    private JFrame frame;
    private JTextField usernameField;
    private JComboBox<String> dietaryComboBox;
    private JTextArea recipeDisplayArea;
    private JTextArea groceryListArea;
    private JPanel mainPanel;
    private JPanel usernamePanel;
    private JPanel contentPanel;
    private CardLayout cardLayout;

    // Timer Components (with renamed timer object to avoid ambiguity)
    private JTextField minutesField;
    private JTextField secondsField;
    private JLabel timerLabel;
    private JButton startButton, pauseButton, resetButton;
    private java.util.Timer countdownTimer; // Renamed to avoid ambiguity
    private int totalSeconds;
    private boolean isTimerRunning = false;

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new RecipeRecommender().showUsernameScreen());
    }

    public RecipeRecommender() {
        // Constructor
    }

    public void showUsernameScreen() {
        frame = new JFrame("Recipe Recommender");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(800, 600);
        frame.setLayout(new BorderLayout());
        frame.setResizable(true);

        usernamePanel = new JPanel();
        usernamePanel.setBackground(new Color(255, 85, 85));
        usernamePanel.setLayout(new BoxLayout(usernamePanel, BoxLayout.Y_AXIS));

        JLabel welcomeLabel = createLabel("Welcome to Recipe Recommender!", 24, Color.WHITE);
        JLabel usernameLabel = createLabel("Enter Username:", 16, Color.WHITE);

        usernameField = new JTextField();
        usernameField.setFont(new Font("Sans Serif", Font.PLAIN, 18));
        usernameField.setMaximumSize(new Dimension(250, 30));
        usernameField.setAlignmentX(Component.CENTER_ALIGNMENT);

        JButton continueButton = createButton("Continue", 18, e -> handleUsernameInput());

        usernamePanel.add(Box.createVerticalStrut(100));
        usernamePanel.add(welcomeLabel);
        usernamePanel.add(Box.createVerticalStrut(20));
        usernamePanel.add(usernameLabel);
        usernamePanel.add(Box.createVerticalStrut(10));
        usernamePanel.add(usernameField);
        usernamePanel.add(Box.createVerticalStrut(20));
        usernamePanel.add(continueButton);

        frame.add(usernamePanel, BorderLayout.CENTER);
        frame.setVisible(true);
    }

    private void handleUsernameInput() {
        String username = usernameField.getText().trim();
        if (username.isEmpty()) {
            JOptionPane.showMessageDialog(frame, "Username cannot be empty.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(frame, "Welcome, " + username + "!", "Login Successful",
                    JOptionPane.INFORMATION_MESSAGE);
            showMainScreen();
        }
    }

    public void showMainScreen() {
        frame.remove(usernamePanel);

        mainPanel = new JPanel();
        mainPanel.setBackground(new Color(255, 230, 230));
        mainPanel.setLayout(new BorderLayout());
        mainPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        JPanel sidebar = createSidebar();

        cardLayout = new CardLayout();
        contentPanel = new JPanel(cardLayout);

        // Recipe and Grocery List Panels
        JPanel recipePanel = new JPanel(new BorderLayout());
        recipeDisplayArea = new JTextArea();
        recipeDisplayArea.setEditable(false);
        recipeDisplayArea.setFont(new Font("Sans Serif", Font.PLAIN, 16));
        recipePanel.add(new JScrollPane(recipeDisplayArea), BorderLayout.CENTER);

        JPanel groceryPanel = new JPanel(new BorderLayout());
        groceryListArea = new JTextArea();
        groceryListArea.setEditable(false);
        groceryListArea.setFont(new Font("Sans Serif", Font.PLAIN, 16));
        groceryPanel.add(new JScrollPane(groceryListArea), BorderLayout.CENTER);

        // Timer Panel (using previous version of the timer)
        JPanel timerPanel = createTimerPanel();

        contentPanel.add(recipePanel, "recipes");
        contentPanel.add(groceryPanel, "groceryList");
        contentPanel.add(timerPanel, "timer");

        mainPanel.add(sidebar, BorderLayout.WEST);
        mainPanel.add(contentPanel, BorderLayout.CENTER);

        frame.add(mainPanel, BorderLayout.CENTER);
        frame.revalidate();
        frame.repaint();
    }

    private JPanel createSidebar() {
        JPanel sidebar = new JPanel();
        sidebar.setLayout(new BoxLayout(sidebar, BoxLayout.Y_AXIS));
        sidebar.setBackground(new Color(255, 85, 85));
        sidebar.setPreferredSize(new Dimension(200, 600));

        JLabel appTitle = createLabel("Recipe Recommender", 30, Color.WHITE);
        JLabel dietaryLabel = createLabel("Select Dietary Preferences", 16, Color.WHITE);

        dietaryComboBox = new JComboBox<>(new String[] {
                "None", "Vegetarian", "Vegan", "Gluten-Free", "Low-Carb", "High-Protein"
        });
        dietaryComboBox.setMaximumSize(new Dimension(150, 30));
        dietaryComboBox.setAlignmentX(Component.CENTER_ALIGNMENT);

        JButton recommendButton = createButton("Recommend Recipes", 16, e -> {
            cardLayout.show(contentPanel, "recipes");
            recommendRecipes();
        });

        JButton generateGroceryListButton = createButton("Generate Grocery List", 16, e -> {
            cardLayout.show(contentPanel, "groceryList");
            generateGroceryList();
        });

        JButton timerButton = createButton("Cooking Timer", 16, e -> {
            cardLayout.show(contentPanel, "timer");
        });

        sidebar.add(Box.createVerticalStrut(30));
        sidebar.add(appTitle);
        sidebar.add(Box.createVerticalStrut(20));
        sidebar.add(dietaryLabel);
        sidebar.add(Box.createVerticalStrut(10));
        sidebar.add(dietaryComboBox);
        sidebar.add(Box.createVerticalStrut(30));
        sidebar.add(recommendButton);
        sidebar.add(Box.createVerticalStrut(20));
        sidebar.add(generateGroceryListButton);
        sidebar.add(Box.createVerticalStrut(20));
        sidebar.add(timerButton);

        return sidebar;
    }

    private JPanel createTimerPanel() {
        JPanel timerPanel = new JPanel();
        timerPanel.setLayout(new BoxLayout(timerPanel, BoxLayout.Y_AXIS));
        timerPanel.setBackground(new Color(255, 230, 230));

        JLabel timerTitle = createLabel("Cooking Timer", 24, Color.BLACK);

        minutesField = new JTextField("00", 2);
        secondsField = new JTextField("00", 2);
        minutesField.setFont(new Font("Sans Serif", Font.PLAIN, 36));
        secondsField.setFont(new Font("Sans Serif", Font.PLAIN, 36));
        minutesField.setHorizontalAlignment(JTextField.CENTER);
        secondsField.setHorizontalAlignment(JTextField.CENTER);

        JPanel timeInputPanel = new JPanel();
        timeInputPanel.add(new JLabel("Minutes: "));
        timeInputPanel.add(minutesField);
        timeInputPanel.add(Box.createHorizontalStrut(10));
        timeInputPanel.add(new JLabel("Seconds: "));
        timeInputPanel.add(secondsField);

        timerLabel = createLabel("00:00", 36, Color.BLACK);

        startButton = createButton("Start", 16, e -> startTimer());
        pauseButton = createButton("Pause", 16, e -> pauseTimer());
        resetButton = createButton("Reset", 16, e -> resetTimer());

        JPanel buttonPanel = new JPanel();
        buttonPanel.add(startButton);
        buttonPanel.add(pauseButton);
        buttonPanel.add(resetButton);

        timerPanel.add(timerTitle);
        timerPanel.add(Box.createVerticalStrut(20));
        timerPanel.add(timeInputPanel);
        timerPanel.add(Box.createVerticalStrut(20));
        timerPanel.add(timerLabel);
        timerPanel.add(Box.createVerticalStrut(20));
        timerPanel.add(buttonPanel);

        return timerPanel;
    }

    private void recommendRecipes() {
        String selectedDiet = (String) dietaryComboBox.getSelectedItem();
        File file = new File("recipes.txt");
        if (!file.exists()) {
            JOptionPane.showMessageDialog(frame, "Recipes file not found!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        StringBuilder recommendations = new StringBuilder("Recommended Recipes:\n\n");
        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = reader.readLine()) != null) {
                if (selectedDiet.equals("None") || line.toLowerCase().contains(selectedDiet.toLowerCase())) {
                    recommendations.append(line).append("\n");
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(frame, "Error reading recipes file.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        recipeDisplayArea.setText(recommendations.toString());
    }

    private void generateGroceryList() {
        File file = new File("grocerylist.txt");
        if (!file.exists()) {
            JOptionPane.showMessageDialog(frame, "Grocery list file not found!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        StringBuilder groceryList = new StringBuilder("Grocery List:\n\n");
        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = reader.readLine()) != null) {
                groceryList.append(line).append("\n");
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(frame, "Error reading grocery list file.", "Error",
                    JOptionPane.ERROR_MESSAGE);
        }

        groceryListArea.setText(groceryList.toString());
    }

    // Timer Code (as before, renamed variable to avoid ambiguity)
    private void startTimer() {
        if (isTimerRunning)
            return;

        int minutes = Integer.parseInt(minutesField.getText());
        int seconds = Integer.parseInt(secondsField.getText());
        totalSeconds = minutes * 60 + seconds;

        countdownTimer = new java.util.Timer(); // Fixed ambiguity by renaming
        countdownTimer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                if (totalSeconds > 0) {
                    totalSeconds--;
                    updateTimerLabel();
                } else {
                    countdownTimer.cancel();
                    JOptionPane.showMessageDialog(frame, "Time's up!", "Timer Finished",
                            JOptionPane.INFORMATION_MESSAGE);
                }
            }
        }, 0, 1000);
        isTimerRunning = true;
        startButton.setEnabled(false);
        pauseButton.setEnabled(true);
        resetButton.setEnabled(true);
    }

    private void pauseTimer() {
        if (countdownTimer != null) {
            countdownTimer.cancel();
        }
        isTimerRunning = false;
        startButton.setEnabled(true);
        pauseButton.setEnabled(false);
        resetButton.setEnabled(true);
    }

    private void resetTimer() {
        if (countdownTimer != null) {
            countdownTimer.cancel();
        }
        totalSeconds = 0;
        isTimerRunning = false;
        updateTimerLabel();
        startButton.setEnabled(true);
        pauseButton.setEnabled(false);
        resetButton.setEnabled(false);
    }

    private void updateTimerLabel() {
        int minutes = totalSeconds / 60;
        int seconds = totalSeconds % 60;
        timerLabel.setText(String.format("%02d:%02d", minutes, seconds));
    }

    private JLabel createLabel(String text, int fontSize, Color color) {
        JLabel label = new JLabel(text);
        label.setFont(new Font("Sans Serif", Font.PLAIN, fontSize));
        label.setForeground(color);
        label.setAlignmentX(Component.CENTER_ALIGNMENT);
        return label;
    }

    private JButton createButton(String text, int fontSize, ActionListener actionListener) {
        JButton button = new JButton(text);
        button.setFont(new Font("Sans Serif", Font.PLAIN, fontSize));
        button.setBackground(new Color(255, 50, 50));
        button.setForeground(Color.WHITE);
        button.setAlignmentX(Component.CENTER_ALIGNMENT);
        button.addActionListener(actionListener);
        return button;
    }
}

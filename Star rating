import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;

public class RecipeRecommender {

    private JFrame frame;
    private JTextField usernameField;
    private JComboBox<String> dietaryComboBox;
    private JTextArea recipeDisplayArea;
    private JTextArea groceryListArea;
    private JPanel mainPanel;
    private JPanel usernamePanel;
    private JPanel contentPanel;
    private CardLayout cardLayout;

    // Feedback Variables
    private int userRating = 0; // Rating from 1 to 5
    private JTextArea feedbackArea;

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new RecipeRecommender().showUsernameScreen());
    }

    public RecipeRecommender() {
        // Constructor
    }

    public void showUsernameScreen() {
        frame = new JFrame("Recipe Recommender");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(800, 600);
        frame.setLayout(new BorderLayout());
        frame.setResizable(true);

        usernamePanel = new JPanel();
        usernamePanel.setBackground(new Color(255, 85, 85));
        usernamePanel.setLayout(new BoxLayout(usernamePanel, BoxLayout.Y_AXIS));

        JLabel welcomeLabel = createLabel("Welcome to Recipe Recommender!", 24, Color.WHITE);
        JLabel usernameLabel = createLabel("Enter Username:", 16, Color.WHITE);

        usernameField = new JTextField();
        usernameField.setFont(new Font("Sans Serif", Font.PLAIN, 18));
        usernameField.setMaximumSize(new Dimension(250, 30));
        usernameField.setAlignmentX(Component.CENTER_ALIGNMENT);

        JButton continueButton = createButton("Continue", 18, e -> handleUsernameInput());

        usernamePanel.add(Box.createVerticalStrut(100));
        usernamePanel.add(welcomeLabel);
        usernamePanel.add(Box.createVerticalStrut(20));
        usernamePanel.add(usernameLabel);
        usernamePanel.add(Box.createVerticalStrut(10));
        usernamePanel.add(usernameField);
        usernamePanel.add(Box.createVerticalStrut(20));
        usernamePanel.add(continueButton);

        frame.add(usernamePanel, BorderLayout.CENTER);
        frame.setVisible(true);
    }

    private void handleUsernameInput() {
        String username = usernameField.getText().trim();
        if (username.isEmpty()) {
            JOptionPane.showMessageDialog(frame, "Username cannot be empty.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(frame, "Welcome, " + username + "!", "Login Successful",
                    JOptionPane.INFORMATION_MESSAGE);
            showMainScreen();
        }
    }

    public void showMainScreen() {
        frame.remove(usernamePanel);

        mainPanel = new JPanel();
        mainPanel.setBackground(new Color(255, 230, 230));
        mainPanel.setLayout(new BorderLayout());
        mainPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        JPanel sidebar = createSidebar();

        cardLayout = new CardLayout();
        contentPanel = new JPanel(cardLayout);

        // Recipe and Grocery List Panels
        JPanel recipePanel = new JPanel(new BorderLayout());
        recipeDisplayArea = new JTextArea();
        recipeDisplayArea.setEditable(false);
        recipeDisplayArea.setFont(new Font("Sans Serif", Font.PLAIN, 16));
        recipePanel.add(new JScrollPane(recipeDisplayArea), BorderLayout.CENTER);

        JPanel groceryPanel = new JPanel(new BorderLayout());
        groceryListArea = new JTextArea();
        groceryListArea.setEditable(false);
        groceryListArea.setFont(new Font("Sans Serif", Font.PLAIN, 16));
        groceryPanel.add(new JScrollPane(groceryListArea), BorderLayout.CENTER);

        // Timer Panel
        JPanel timerPanel = createTimerPanel();

        // Feedback Panel
        JPanel feedbackPanel = createFeedbackPanel();

        contentPanel.add(recipePanel, "recipes");
        contentPanel.add(groceryPanel, "groceryList");
        contentPanel.add(timerPanel, "timer");
        contentPanel.add(feedbackPanel, "feedback");

        mainPanel.add(sidebar, BorderLayout.WEST);
        mainPanel.add(contentPanel, BorderLayout.CENTER);

        frame.add(mainPanel, BorderLayout.CENTER);
        frame.revalidate();
        frame.repaint();
    }

    private JPanel createSidebar() {
        JPanel sidebar = new JPanel();
        sidebar.setLayout(new BoxLayout(sidebar, BoxLayout.Y_AXIS));
        sidebar.setBackground(new Color(255, 85, 85));
        sidebar.setPreferredSize(new Dimension(200, 600));

        JLabel appTitle = createLabel("Recipe Recommender", 30, Color.WHITE);
        JLabel dietaryLabel = createLabel("Select Dietary Preferences", 16, Color.WHITE);

        dietaryComboBox = new JComboBox<>(new String[] {
                "None", "Vegetarian", "Vegan", "Gluten-Free", "Low-Carb", "High-Protein"
        });
        dietaryComboBox.setMaximumSize(new Dimension(150, 30));
        dietaryComboBox.setAlignmentX(Component.CENTER_ALIGNMENT);

        JButton recommendButton = createButton("Recommend Recipes", 16, e -> {
            cardLayout.show(contentPanel, "recipes");
            recommendRecipes();
        });

        JButton generateGroceryListButton = createButton("Generate Grocery List", 16, e -> {
            cardLayout.show(contentPanel, "groceryList");
            generateGroceryList();
        });

        JButton timerButton = createButton("Cooking Timer", 16, e -> {
            cardLayout.show(contentPanel, "timer");
        });

        JButton feedbackButton = createButton("Give Feedback", 16, e -> {
            cardLayout.show(contentPanel, "feedback");
        });

        sidebar.add(Box.createVerticalStrut(30));
        sidebar.add(appTitle);
        sidebar.add(Box.createVerticalStrut(20));
        sidebar.add(dietaryLabel);
        sidebar.add(Box.createVerticalStrut(10));
        sidebar.add(dietaryComboBox);
        sidebar.add(Box.createVerticalStrut(30));
        sidebar.add(recommendButton);
        sidebar.add(Box.createVerticalStrut(20));
        sidebar.add(generateGroceryListButton);
        sidebar.add(Box.createVerticalStrut(20));
        sidebar.add(timerButton);
        sidebar.add(Box.createVerticalStrut(20));
        sidebar.add(feedbackButton);

        return sidebar;
    }

    private JPanel createTimerPanel() {
        JPanel timerPanel = new JPanel();
        timerPanel.setLayout(new BoxLayout(timerPanel, BoxLayout.Y_AXIS));
        timerPanel.setBackground(new Color(255, 230, 230));

        JLabel timerTitle = createLabel("Cooking Timer", 24, Color.BLACK);

        JTextField minutesField = new JTextField("00", 2);
        JTextField secondsField = new JTextField("00", 2);
        minutesField.setFont(new Font("Sans Serif", Font.PLAIN, 36));
        secondsField.setFont(new Font("Sans Serif", Font.PLAIN, 36));
        minutesField.setHorizontalAlignment(JTextField.CENTER);
        secondsField.setHorizontalAlignment(JTextField.CENTER);

        JPanel timeInputPanel = new JPanel();
        timeInputPanel.add(new JLabel("Minutes: "));
        timeInputPanel.add(minutesField);
        timeInputPanel.add(Box.createHorizontalStrut(10));
        timeInputPanel.add(new JLabel("Seconds: "));
        timeInputPanel.add(secondsField);

        JLabel timerLabel = createLabel("00:00", 36, Color.BLACK);

        JButton startButton = createButton("Start", 16, e -> {
            // Implement start timer logic
        });
        JButton pauseButton = createButton("Pause", 16, e -> {
            // Implement pause timer logic
        });
        JButton resetButton = createButton("Reset", 16, e -> {
            // Implement reset timer logic
        });

        JPanel buttonPanel = new JPanel();
        buttonPanel.add(startButton);
        buttonPanel.add(pauseButton);
        buttonPanel.add(resetButton);

        timerPanel.add(timerTitle);
        timerPanel.add(Box.createVerticalStrut(20));
        timerPanel.add(timeInputPanel);
        timerPanel.add(Box.createVerticalStrut(20));
        timerPanel.add(timerLabel);
        timerPanel.add(Box.createVerticalStrut(20));
        timerPanel.add(buttonPanel);

        return timerPanel;
    }

    private JPanel createFeedbackPanel() {
        JPanel feedbackPanel = new JPanel();
        feedbackPanel.setLayout(new BoxLayout(feedbackPanel, BoxLayout.Y_AXIS));

        JLabel feedbackTitle = createLabel("Rate this Recipe", 24, Color.BLACK);

        // Create star rating system using buttons with icons
        JPanel ratingPanel = new JPanel();
        ratingPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 10, 10));
        JButton[] stars = new JButton[5];
        for (int i = 0; i < 5; i++) {
            int starIndex = i;
            stars[i] = new JButton(new ImageIcon("empty.png")); // Path to your empty star icon
            stars[i].setActionCommand(String.valueOf(i + 1));
            stars[i].setContentAreaFilled(false);
            stars[i].setBorderPainted(false);
            stars[i].addActionListener(e -> updateStarRating(starIndex, stars));
            ratingPanel.add(stars[i]);
        }


        feedbackArea = new JTextArea();
        feedbackArea.setFont(new Font("Sans Serif", Font.PLAIN, 16));
        JScrollPane feedbackScrollPane = new JScrollPane(feedbackArea);

        JButton submitFeedbackButton = createButton("Submit Feedback", 18, e -> {
            submitFeedback(stars);
        });

        feedbackPanel.add(feedbackTitle);
        feedbackPanel.add(ratingPanel);
        feedbackPanel.add(feedbackScrollPane);
        feedbackPanel.add(submitFeedbackButton);

        return feedbackPanel;
    }

    private void updateStarRating(int starIndex, JButton[] stars) {
        userRating = starIndex + 1;
        for (int i = 0; i < 5; i++) {
            if (i <= starIndex) {
                // stars[i].setIcon(new ImageIcon("filled.png")); // Path to your filled star icon
                stars[i].setIcon(new ImageIcon( new ImageIcon("filled.png").getImage().getScaledInstance(30, 30, Image.SCALE_SMOOTH))); // Resize
                                                                                                            
            } else {
                // stars[i].setIcon(new ImageIcon("empty.png"));
                stars[i].setIcon(new ImageIcon(new ImageIcon("empty.png").getImage().getScaledInstance(30, 30, Image.SCALE_SMOOTH))); // Resize                                                                                                            
            }
        }
    }

    private void submitFeedback(JButton[] stars) {
        String feedback = feedbackArea.getText().trim();
        if (userRating == 0 || feedback.isEmpty()) {
            JOptionPane.showMessageDialog(frame, "Please provide a rating and feedback!", "Error",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            saveFeedback(userRating, feedback);
            JOptionPane.showMessageDialog(frame, "Feedback submitted successfully!", "Success",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void saveFeedback(int rating, String feedback) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("feedback.txt", true))) {
            writer.write("Rating: " + rating + " stars\n");
            writer.write("Feedback: " + feedback + "\n\n");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(frame, "Error saving feedback.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private JLabel createLabel(String text, int fontSize, Color color) {
        JLabel label = new JLabel(text);
        label.setFont(new Font("Sans Serif", Font.PLAIN, fontSize));
        label.setForeground(color);
        label.setAlignmentX(Component.CENTER_ALIGNMENT);
        return label;
    }

    private JButton createButton(String text, int fontSize, ActionListener actionListener) {
        JButton button = new JButton(text);
        button.setFont(new Font("Sans Serif", Font.PLAIN, fontSize));
        button.setAlignmentX(Component.CENTER_ALIGNMENT);
        button.addActionListener(actionListener);
        return button;
    }

    private void recommendRecipes() {
        String selectedDiet = (String) dietaryComboBox.getSelectedItem();
        File file = new File("recipes.txt");
        if (!file.exists()) {
            JOptionPane.showMessageDialog(frame, "Recipes file not found!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        StringBuilder recommendations = new StringBuilder("Recommended Recipes:\n\n");
        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = reader.readLine()) != null) {
                if (selectedDiet.equals("None") || line.toLowerCase().contains(selectedDiet.toLowerCase())) {
                    recommendations.append(line).append("\n");
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(frame, "Error reading recipes file.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        recipeDisplayArea.setText(recommendations.toString());
    }

    private void generateGroceryList() {
        String recipe = recipeDisplayArea.getText();
        if (recipe.isEmpty()) {
            JOptionPane.showMessageDialog(frame, "Please recommend a recipe first!", "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        String[] ingredients = { "Tomatoes", "Onions", "Garlic", "Olive Oil" };
        StringBuilder groceryList = new StringBuilder("Grocery List:\n\n");
        for (String ingredient : ingredients) {
            groceryList.append(ingredient).append("\n");
        }

        groceryListArea.setText(groceryList.toString());
    }
}
